# React component
snippet comp "Framework for creating new Typescript React components" b
import React from 'react';
import { connect } from 'react-redux';
import { useTheme } from "@material-ui/core/styles";

export type Props = {
};

export const ${1:ComponentName}: React.FC<Props> = ({}) => {
  const theme = useTheme();
  $0
};

function mapStateToProps(state: any, ownProps: {}) {
  return {};
}

export default connect(mapStateToProps)($1);
endsnippet

# React component test
snippet tcomp "Framework for testing newly created Typescript React components" b
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { shallow } from "enzyme";

import { ${1:ComponentName} } from "./$1";

jest.mock("react", () => {
  const react = jest.requireActual("react");
  return {
    ...react,
    useEffect: jest.fn(),
  };
});

jest.mock("react-redux", () => {
  const reactRedux = jest.requireActual("react-redux");

  return {
    ...reactRedux,
    useDispatch: jest.fn(),
    useSelector: jest.fn(),
  };
});

describe('$1 tests', () => {
  let props = null;
  let dispatch = null;
  beforeEach(() => {
    props = {
      $2
    };
    dispatch = jest.fn();
    useEffect.mockReset();
    useDispatch.mockReset();
    useDispatch.mockReturnValue(dispatch);
    useSelector.mockReset();
  });
  it('renders the component with empty results', () => {
    const component = shallow(<$1 {...props} />);
    $0
  });
});
endsnippet

# React component test
snippet tcompv "Framework for testing newly created Typescript React components using vitest" b
import React, { useEffect } from "react";
import { vi, describe, beforeEach, it, expect } from 'vitest';
import { useDispatch, useSelector } from "react-redux";
import { shallow } from "enzyme";

import { ${1:ComponentName} } from "./$1";

vi.mock("react", async (importOriginal) => {
  const react = await importOriginal();

  return {
    ...react,
    useEffect: vi.fn(),
  };
});

vi.mock("react-redux", async (importOriginal) => {
  const reactRedux = await importOriginal();

  return {
    ...reactRedux,
    useDispatch: vi.fn(),
    useSelector: vi.fn(),
  };
});

describe('$1 tests', () => {
  let props = null;
  let dispatch = null;
  beforeEach(() => {
    props = {
      $2
    };
    dispatch = vi.fn();
    useEffect.mockReset();
    useDispatch.mockReset();
    useDispatch.mockReturnValue(dispatch);
    useSelector.mockReset();
  });
  it('renders the component with empty results', () => {
    const component = shallow(<$1 {...props} />);
    $0
  });
});
endsnippet

snippet descr "Start a 'describe' for tests" b
describe('$1', () => {
  it('$2', () => {
    $0
  });
});
endsnippet

# Snippet for creating a new mock
snippet tmock "Framework for generating a jest mock" b
jest.mock("${1:mock/import}", () => {
  const original = jest.requireActual("$1");

  return {
    ...original,
    ${0}
  };
});
endsnippet

# Snippet for creating a new mock for vitest
snippet tmockv "Framework for generating a vitest mock" b
vi.mock("${1:mock/import}", async (importOriginal) => {
  const original = await importOriginal();

  return {
    ...original,
    ${0}
  };
});
endsnippet

# Snippet for mocking out useSelector
snippet tselect "Function for mocking useSelector for a component" b
function mockSelector({
  ${1:val},
}) {
  let iteration = -1;
  useSelector.mockImplementation(() => {
    iteration = (iteration + 1) % ${3:1};
    switch (iteration) {
      case 0:
        return $1;
    }
  });
}
endsnippet
